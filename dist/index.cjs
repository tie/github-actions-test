"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var t=e(require("os")),n=e(require("path")),r="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function o(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function i(e,t){return e(t={exports:{}},t.exports),t.exports}var s=i((function(e,n){var o=r&&r.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(n,"__esModule",{value:!0});const i=o(t);function s(e,t,n){const r=new u(e,t,n);process.stdout.write(r.toString()+i.EOL)}n.issueCommand=s,n.issue=function(e,t=""){s(e,{},t)};class u{constructor(e,t,n){e||(e="missing.command"),this.command=e,this.properties=t,this.message=n}toString(){let e="::"+this.command;if(this.properties&&Object.keys(this.properties).length>0){e+=" ";let n=!0;for(const r in this.properties)if(this.properties.hasOwnProperty(r)){const o=this.properties[r];o&&(n?n=!1:e+=",",e+=`${r}=${t=o,a(t).replace(/%/g,"%25").replace(/\r/g,"%0D").replace(/\n/g,"%0A").replace(/:/g,"%3A").replace(/,/g,"%2C")}`)}}var t;return e+="::"+function(e){return a(e).replace(/%/g,"%25").replace(/\r/g,"%0D").replace(/\n/g,"%0A")}(this.message),e}}function a(e){return null==e?"":"string"==typeof e||e instanceof String?e:JSON.stringify(e)}n.toCommandValue=a}));o(s);s.issueCommand,s.issue,s.toCommandValue;var u=i((function(e,o){var i=r&&r.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{a(r.next(e))}catch(e){i(e)}}function u(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,u)}a((r=r.apply(e,t||[])).next())}))},u=r&&r.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(o,"__esModule",{value:!0});const a=u(t),c=u(n);var f;function p(e){s.issue("error",e instanceof Error?e.toString():e)}function l(e){s.issue("group",e)}function d(){s.issue("endgroup")}!function(e){e[e.Success=0]="Success",e[e.Failure=1]="Failure"}(f=o.ExitCode||(o.ExitCode={})),o.exportVariable=function(e,t){const n=s.toCommandValue(t);process.env[e]=n,s.issueCommand("set-env",{name:e},n)},o.setSecret=function(e){s.issueCommand("add-mask",{},e)},o.addPath=function(e){s.issueCommand("add-path",{},e),process.env.PATH=`${e}${c.delimiter}${process.env.PATH}`},o.getInput=function(e,t){const n=process.env["INPUT_"+e.replace(/ /g,"_").toUpperCase()]||"";if(t&&t.required&&!n)throw new Error("Input required and not supplied: "+e);return n.trim()},o.setOutput=function(e,t){s.issueCommand("set-output",{name:e},t)},o.setCommandEcho=function(e){s.issue("echo",e?"on":"off")},o.setFailed=function(e){process.exitCode=f.Failure,p(e)},o.isDebug=function(){return"1"===process.env.RUNNER_DEBUG},o.debug=function(e){s.issueCommand("debug",{},e)},o.error=p,o.warning=function(e){s.issue("warning",e instanceof Error?e.toString():e)},o.info=function(e){process.stdout.write(e+a.EOL)},o.startGroup=l,o.endGroup=d,o.group=function(e,t){return i(this,void 0,void 0,(function*(){let n;l(e);try{n=yield t()}finally{d()}return n}))},o.saveState=function(e,t){s.issueCommand("save-state",{name:e},t)},o.getState=function(e){return process.env["STATE_"+e]||""}})),a=o(u);u.ExitCode,u.exportVariable,u.setSecret,u.addPath,u.getInput,u.setOutput,u.setCommandEcho,u.setFailed,u.isDebug,u.debug,u.error,u.warning,u.info,u.startGroup,u.endGroup,u.group,u.saveState,u.getState;const c=a.getInput("name");console.log(`Hello ${c}!`);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
